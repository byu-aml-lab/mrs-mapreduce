.. _writing_your_own:

*********************
Writing a Mrs Program
*********************

.. _writing-your-own:

Basic Mrs Programs
==================

The WordCount program used throughout the documentation
shows a Mrs program in it's most simple form. In this
tutorial, we will try to explain the basic format for a Mrs MapReduce program
and some of the options for a more complex program.

The basic format for a Mrs MapReduce program looks something like this ::

    import mrs

    class MrsProgram(mrs.MapReduce):
        def map(key, value):
            yield newkey, newvalue

        def reduce(key, values):
            yield newvalue

    if __name__ == '__main__':
        mrs.main(MrsProgram)

Here we create a class that extends the MapReduce class in the `MRS_HOME/mrs/
mapreduce.py <http://code.google.com/p/mrs-mapreduce/source/browse/mrs/map
reduce.py>`_ file, and overrides only the required map and reduce functions.
The last section of code (the "if __name__ == '__main__':" section) just passes
the program to Mrs to run.

For example, in the map function in the wordcount program, we take in a chunk of
text as the starting value, break it up into words and yield each word as a new
key with a value of one (found one instance of that word). Then the reduce
function sums all values associated with a particular key (word), and yields
the result.

But what if, instead to reading in just one textfile and counting the words as
we've been doing, you had thousands of files that you neededto process? This is
a little more complicated, so you would probably want to override the
*input_data()* function from mapreduce.py, by adding something like the
following to your the wordcount program. (See `wordcount2.py <http://code.google
.com/p/mrs-mapreduce/source/browse/examples/wordcount2.py>`_ in the examples
folder.) ::

    def input_data(self, job):
        if len(self.args) < 2:
            print >>sys.stderr, "Requires input(s) and an output."
            return None
        inputs = []
        f = open(self.args[0])
        for line in f:
            inputs.append(line[:-1])
        return job.file_data(inputs)

Now, you can just pass in a single file containing the path to each text file on
a line of the input file, and it will read them all in.


Additional Examples
===================

The ``examples`` directory includes several additional examples of MapReduce
programs of varying levels of complexity:

- `wordcount2.py <http://code.google.com/p/mrs-mapreduce/source/browse/examples/wordcount2.py>`_:
  a more full-featured version of WordCount that uses a combiner and
  explicitly sets a serializer (instead of automatically using pickle).

- `pi/pure_pi.py <http://code.google.com/p/mrs-mapreduce/source/browse/examples/pi/pure_pi.py>`_:
  a sample program that estimates pi by sampling a large number of values
  from a `Halton sequence <http://en.wikipedia.org/wiki/Halton_sequence>`_
  (comparable to Hadoop's ``PiEstimator`` example).  This program includes an
  example of a custom ``run`` method.

- `pi/c_pi.py <http://code.google.com/p/mrs-mapreduce/source/browse/examples/pi/c_pi.py>`_:
  a fast implementation of the Pi estimator that uses ``ctypes`` to call a
  function written in C.

- `dependency_parse.py <http://code.google.com/p/mrs-mapreduce/source/browse/examples/dependency_parse.py>`_:
  a real-life problem which unfortunately relies on some external modules.
